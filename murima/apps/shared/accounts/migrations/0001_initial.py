# Generated by Django 5.2.2 on 2025-06-08 19:00

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TenantRole',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Internal name for the role (e.g., "admin", "supervisor", "agent").', max_length=50, verbose_name='name')),
                ('display_name', models.CharField(help_text='Human-readable name for the role.', max_length=100, verbose_name='display name')),
                ('description', models.TextField(blank=True, help_text='Description of what this role can do.', verbose_name='description')),
                ('permissions', models.JSONField(default=dict, help_text='JSON object containing permission definitions.', verbose_name='permissions')),
                ('asterisk', models.BooleanField(default=False, help_text='Determines if this role will be given an extension.', verbose_name='asterisk')),
                ('is_system_role', models.BooleanField(default=False, help_text='Whether this is a system-defined role that cannot be deleted.', verbose_name='system role')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role is currently active.', verbose_name='active')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Order for displaying roles in lists.', verbose_name='sort order')),
            ],
            options={
                'verbose_name': 'Tenant Role',
                'verbose_name_plural': 'Tenant Roles',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserInvitation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('email', models.EmailField(help_text='Email address of the invited user.', max_length=254, verbose_name='email')),
                ('token', models.UUIDField(default=uuid.uuid4, help_text='Unique token for this invitation.', unique=True, verbose_name='invitation token')),
                ('message', models.TextField(blank=True, help_text='Personal message included with the invitation.', verbose_name='invitation message')),
                ('expires_at', models.DateTimeField(help_text='Date and time when this invitation expires.', verbose_name='expires at')),
                ('is_accepted', models.BooleanField(default=False, help_text='Whether this invitation has been accepted.', verbose_name='accepted')),
                ('accepted_at', models.DateTimeField(blank=True, help_text='Date and time when this invitation was accepted.', null=True, verbose_name='accepted at')),
            ],
            options={
                'verbose_name': 'User Invitation',
                'verbose_name_plural': 'User Invitations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('session_key', models.CharField(max_length=255, unique=True)),
                ('token_type', models.CharField(choices=[('session', 'Session'), ('jwt', 'JWT')], default='jwt', max_length=20)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet'), ('unknown', 'Unknown')], default='unknown', help_text='Type of device used for this session.', max_length=20, verbose_name='device type')),
                ('browser', models.CharField(blank=True, help_text='Browser name and version.', max_length=100, verbose_name='browser')),
                ('operating_system', models.CharField(blank=True, help_text='Operating system name and version.', max_length=100, verbose_name='operating system')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address used for this session.', verbose_name='IP address')),
                ('location', models.CharField(blank=True, help_text='Geographical location based on IP address.', max_length=255, verbose_name='location')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Date and time of last activity in this session.', verbose_name='last activity')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this session is currently active.', verbose_name='active')),
                ('ended_at', models.DateTimeField(blank=True, help_text='Date and time when this session ended.', null=True, verbose_name='ended at')),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, help_text='Optional. Phone number for SMS notifications.', max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('full_name', models.CharField(blank=True, help_text='Full display name for the user.', max_length=255, verbose_name='full name')),
                ('is_platform_admin', models.BooleanField(default=False, help_text='Designates whether the user can manage the entire platform.', verbose_name='platform administrator')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified their email address.', verbose_name='verified')),
                ('last_password_change', models.DateTimeField(auto_now_add=True, help_text='Date and time of last password change.', null=True, verbose_name='last password change')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts.', verbose_name='failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account is locked until this date/time.', null=True, verbose_name='account locked until')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OTPToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('token', models.CharField(help_text='The OTP token (usually 6 digits).', max_length=10, verbose_name='token')),
                ('token_type', models.CharField(choices=[('login', 'Login Authentication'), ('email_verification', 'Email Verification'), ('password_reset', 'Password Reset'), ('account_unlock', 'Account Unlock')], help_text='The purpose of this OTP token.', max_length=20, verbose_name='token type')),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('whatsapp', 'WhatsApp')], help_text='How the OTP was delivered to the user.', max_length=20, verbose_name='delivery method')),
                ('recipient', models.CharField(help_text='Email address or phone number where OTP was sent.', max_length=255, verbose_name='recipient')),
                ('expires_at', models.DateTimeField(help_text='Date and time when this OTP expires.', verbose_name='expires at')),
                ('is_used', models.BooleanField(default=False, help_text='Whether this OTP has been used.', verbose_name='used')),
                ('used_at', models.DateTimeField(blank=True, help_text='Date and time when this OTP was used.', null=True, verbose_name='used at')),
                ('attempts', models.PositiveIntegerField(default=0, help_text='Number of verification attempts for this OTP.', verbose_name='attempts')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the OTP was requested.', null=True, verbose_name='IP address')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string from the request.', verbose_name='user agent')),
                ('user', models.ForeignKey(help_text='The user this OTP token belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='otp_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTP Token',
                'verbose_name_plural': 'OTP Tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlatformRole',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('role', models.CharField(choices=[('super_admin', 'Super Administrator'), ('admin', 'Administrator'), ('support', 'Support Staff'), ('billing', 'Billing Manager'), ('security', 'Security Officer')], help_text='The platform role assigned to the user.', max_length=50, verbose_name='role')),
                ('permissions', models.JSONField(default=dict, help_text='Additional permission overrides for this role.', verbose_name='permissions')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Date and time when this role expires (optional).', null=True, verbose_name='expires at')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this platform role is currently active.', verbose_name='active')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('granted_by', models.ForeignKey(blank=True, help_text='The user who granted this platform role.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_platform_roles', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user who has this platform role.', on_delete=django.db.models.deletion.CASCADE, related_name='platform_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Platform Role',
                'verbose_name_plural': 'Platform Roles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TenantMembership',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this membership is currently active.', verbose_name='active')),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the user joined the tenant.', verbose_name='joined at')),
                ('deactivated_at', models.DateTimeField(blank=True, help_text='Date and time when the membership was deactivated.', null=True, verbose_name='deactivated at')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='The user who deactivated this membership.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deactivated_memberships', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('invited_by', models.ForeignKey(blank=True, help_text='The user who invited this member to the tenant.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_memberships_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant Membership',
                'verbose_name_plural': 'Tenant Memberships',
                'ordering': ['-joined_at'],
            },
        ),
    ]
