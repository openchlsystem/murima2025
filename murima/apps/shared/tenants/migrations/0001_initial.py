# Generated by Django 5.2.2 on 2025-06-08 14:38

import django.core.validators
import django.db.models.deletion
import django_tenants.postgresql_backend.base
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('name', models.CharField(help_text='Organization name', max_length=100)),
                ('subdomain', models.CharField(help_text="Unique subdomain for tenant access (e.g., 'acme' for acme.murima.com)", max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='Subdomain must contain only lowercase letters, numbers, and hyphens. Cannot start or end with hyphen.', regex='^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'), django.core.validators.MinLengthValidator(3, 'Subdomain must be at least 3 characters long.')])),
                ('description', models.TextField(blank=True, help_text='Brief description of the organization')),
                ('sector', models.CharField(choices=[('general', 'General Purpose'), ('helpline', 'Child Helplines & Crisis Support'), ('healthcare', 'Healthcare Providers'), ('customer_service', 'Customer Service Centers'), ('government', 'Government Agencies'), ('nonprofit', 'Non-Profit Organizations'), ('education', 'Educational Institutions')], default='general', help_text='Industry sector for specialized features', max_length=50)),
                ('primary_contact_email', models.EmailField(help_text='Primary contact email for the organization', max_length=254)),
                ('primary_contact_phone', models.CharField(blank=True, help_text='Primary contact phone number', max_length=20)),
                ('address', models.TextField(blank=True, help_text="Organization's physical address")),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state_province', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('registration_number', models.CharField(blank=True, help_text='Business registration or license number', max_length=100)),
                ('tax_id', models.CharField(blank=True, help_text='Tax identification number', max_length=50)),
                ('subscription_plan', models.CharField(choices=[('trial', 'Trial (30 days)'), ('basic', 'Basic Plan'), ('professional', 'Professional Plan'), ('enterprise', 'Enterprise Plan'), ('custom', 'Custom Plan')], default='trial', help_text='Current subscription plan', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this tenant is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription_started_at', models.DateTimeField(blank=True, help_text='When the current subscription started', null=True)),
                ('subscription_expires_at', models.DateTimeField(blank=True, help_text='When the current subscription expires', null=True)),
                ('trial_ends_at', models.DateTimeField(blank=True, help_text='When the trial period ends', null=True)),
                ('branding_settings', models.JSONField(blank=True, default=dict, help_text='Tenant-specific branding configuration (logo, colors, etc.)')),
                ('feature_flags', models.JSONField(blank=True, default=dict, help_text='Enabled/disabled features for this tenant')),
                ('integration_settings', models.JSONField(blank=True, default=dict, help_text='Third-party integration configurations')),
                ('max_users', models.PositiveIntegerField(default=10, help_text='Maximum number of users allowed for this tenant')),
                ('max_storage_mb', models.PositiveIntegerField(default=1024, help_text='Maximum storage in megabytes')),
                ('max_monthly_calls', models.PositiveIntegerField(blank=True, help_text='Maximum number of calls per month (null = unlimited)', null=True)),
                ('max_monthly_sms', models.PositiveIntegerField(blank=True, help_text='Maximum number of SMS messages per month (null = unlimited)', null=True)),
                ('data_retention_days', models.PositiveIntegerField(default=2555, help_text='Number of days to retain data before auto-deletion')),
                ('require_2fa', models.BooleanField(default=False, help_text='Whether two-factor authentication is required for all users')),
                ('ip_whitelist', models.JSONField(blank=True, default=list, help_text='List of allowed IP addresses/ranges (empty = no restriction)')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this tenant (visible to platform admins only)')),
                ('owner', models.ForeignKey(help_text='User who owns/administers this tenant', on_delete=django.db.models.deletion.PROTECT, related_name='owned_tenants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=253, unique=True)),
                ('is_primary', models.BooleanField(db_index=True, default=True)),
                ('is_custom', models.BooleanField(default=False, help_text='Whether this is a custom domain (vs. subdomain.murima.com)')),
                ('ssl_certificate', models.TextField(blank=True, help_text='SSL certificate for custom domains')),
                ('ssl_private_key', models.TextField(blank=True, help_text='SSL private key for custom domains')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the domain was verified', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
            },
        ),
        migrations.CreateModel(
            name='TenantInvitation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('email', models.EmailField(help_text='Email address of the person being invited', max_length=254)),
                ('role_name', models.CharField(help_text="Name of the role to assign (e.g., 'admin', 'agent', 'viewer')", max_length=50)),
                ('message', models.TextField(blank=True, help_text='Personal message to include with the invitation')),
                ('token', models.UUIDField(default=uuid.uuid4, help_text='Unique token for accepting the invitation', unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('expired', 'Expired'), ('revoked', 'Revoked')], default='pending', help_text='Current status of the invitation', max_length=20)),
                ('expires_at', models.DateTimeField(help_text='When the invitation expires')),
                ('accepted_at', models.DateTimeField(blank=True, help_text='When the invitation was accepted', null=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='When the invitation was sent')),
                ('reminder_sent_at', models.DateTimeField(blank=True, help_text='When the last reminder was sent', null=True)),
                ('revoked_at', models.DateTimeField(blank=True, help_text='When the invitation was revoked', null=True)),
                ('accepted_by', models.ForeignKey(blank=True, help_text='User who accepted the invitation (may differ from invited email)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_invitations_accepted', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('invited_by', models.ForeignKey(help_text='User who sent the invitation', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('revoked_by', models.ForeignKey(blank=True, help_text='User who revoked the invitation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revoked_invitations', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(help_text='Tenant the user is being invited to join', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_invitations', to='tenants.tenant')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant Invitation',
                'verbose_name_plural': 'Tenant Invitations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TenantSettings',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('category', models.CharField(help_text="Category for grouping settings (e.g., 'email', 'phone', 'branding')", max_length=50)),
                ('key', models.CharField(help_text='Setting identifier within the category', max_length=100)),
                ('name', models.CharField(help_text='Human-readable name for the setting', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of what this setting controls')),
                ('value', models.TextField(help_text='Setting value (stored as text, interpreted based on setting_type)')),
                ('setting_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('boolean', 'Boolean'), ('json', 'JSON Object'), ('text', 'Long Text'), ('url', 'URL'), ('email', 'Email'), ('phone', 'Phone Number')], default='string', help_text='Type of value stored in this setting', max_length=20)),
                ('is_sensitive', models.BooleanField(default=False, help_text='Whether this setting contains sensitive data (API keys, passwords, etc.)')),
                ('is_system', models.BooleanField(default=False, help_text='Whether this is a system setting (not user-configurable)')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(help_text='Tenant this setting belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='tenants.tenant')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant Setting',
                'verbose_name_plural': 'Tenant Settings',
                'ordering': ['category', 'key'],
            },
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['subdomain'], name='tenants_ten_subdoma_6c6a7a_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['sector', 'is_active'], name='tenants_ten_sector_516b37_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['subscription_plan', 'is_active'], name='tenants_ten_subscri_44f8d9_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['created_at'], name='tenants_ten_created_99c6ff_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['subscription_expires_at'], name='tenants_ten_subscri_e21bbd_idx'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['domain'], name='tenants_dom_domain_6df599_idx'),
        ),
        migrations.AddIndex(
            model_name='domain',
            index=models.Index(fields=['is_primary', 'tenant'], name='tenants_dom_is_prim_7a47e6_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['email', 'tenant'], name='tenants_ten_email_96f155_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['token'], name='tenants_ten_token_a4104e_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['status', 'expires_at'], name='tenants_ten_status_a7e6f6_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['tenant', 'status'], name='tenants_ten_tenant__ce25b8_idx'),
        ),
        migrations.AddConstraint(
            model_name='tenantinvitation',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('tenant', 'email'), name='unique_pending_invitation_per_email_tenant'),
        ),
        migrations.AddIndex(
            model_name='tenantsettings',
            index=models.Index(fields=['tenant', 'category'], name='tenants_ten_tenant__d89567_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantsettings',
            index=models.Index(fields=['tenant', 'key'], name='tenants_ten_tenant__ff129f_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantsettings',
            index=models.Index(fields=['category', 'key'], name='tenants_ten_categor_955b30_idx'),
        ),
        migrations.AddConstraint(
            model_name='tenantsettings',
            constraint=models.UniqueConstraint(fields=('tenant', 'category', 'key'), name='unique_tenant_setting'),
        ),
    ]
