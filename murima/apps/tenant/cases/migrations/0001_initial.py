# Generated by Django 5.2.2 on 2025-07-31 12:52

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CaseHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('protection_notes', models.TextField(blank=True, help_text='Special notes for protection cases')),
                ('risk_assessment', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Low Risk'), (2, 'Medium Risk'), (3, 'High Risk'), (4, 'Extreme Risk')], null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case History',
            },
        ),
        migrations.CreateModel(
            name='CaseNote',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('protection_notes', models.TextField(blank=True, help_text='Special notes for protection cases')),
                ('risk_assessment', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Low Risk'), (2, 'Medium Risk'), (3, 'High Risk'), (4, 'Extreme Risk')], null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Note',
            },
        ),
        migrations.CreateModel(
            name='CaseStatus',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('status_name', models.CharField(help_text="Name of the status (e.g., 'Open', 'In Progress')", max_length=50)),
                ('code', models.SlugField(help_text='Short code for the status', max_length=30, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this status')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this status is available for use')),
                ('is_closed', models.BooleanField(default=False, help_text='Whether this status represents a closed case')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default status for new cases')),
                ('color', models.CharField(blank=True, help_text='Color code to represent this status', max_length=20)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Order in which statuses should be displayed')),
                ('allowed_next_statuses', models.ManyToManyField(blank=True, help_text='Statuses that can follow this one in workflow', to='cases.casestatus')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Status',
                'verbose_name_plural': 'Case Statuses',
                'ordering': ['order', 'status_name'],
            },
        ),
        migrations.CreateModel(
            name='CaseType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.SlugField(unique=True)),
                ('category', models.CharField(choices=[('vac', 'Violence Against Children'), ('gbv', 'Gender-Based Violence'), ('general', 'General Protection'), ('other', 'Other')], default='general', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_immediate_response', models.BooleanField(default=False, help_text='Whether cases of this type require immediate action')),
                ('mandatory_reporting', models.BooleanField(default=False, help_text='Whether this case type requires legal reporting')),
                ('default_safety_plan', models.TextField(blank=True, help_text='Default safety plan template for this case type')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Type',
                'verbose_name_plural': 'Case Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('case_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('priority', models.PositiveSmallIntegerField(choices=[(1, 'Emergency (24h response)'), (2, 'Urgent (48h response)'), (3, 'High (72h response)'), (4, 'Medium (5 day response)'), (5, 'Low (7 day response)')], default=4)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('survivor_code', models.CharField(blank=True, help_text='Anonymous identifier for survivors', max_length=36)),
                ('incident_date', models.DateField(blank=True, help_text='Date of the reported incident', null=True)),
                ('incident_location', models.JSONField(blank=True, default=dict, help_text='Location details of incident')),
                ('perpetrator_relationship', models.CharField(blank=True, help_text='Relationship to survivor (if known)', max_length=100)),
                ('protection_concerns', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Specific protection risks identified', size=None)),
                ('services_provided', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Services accessed by survivor', size=None)),
                ('referral_organizations', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Organizations involved in case', size=None)),
                ('disclosure_consent', models.BooleanField(default=False, help_text='Whether survivor consented to information sharing')),
                ('consent_details', models.JSONField(blank=True, default=dict, help_text='Scope and limitations of consent')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assigned_cases', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_cases', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='cases.casestatus')),
                ('case_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='cases.casetype')),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProtectionDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.PositiveSmallIntegerField(choices=[(1, 'Low Risk'), (2, 'Medium Risk'), (3, 'High Risk'), (4, 'Extreme Risk')], default=2)),
                ('immediate_needs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Urgent needs: medical, shelter, legal etc.', size=None)),
                ('safety_measures', models.JSONField(default=list, help_text='Implemented safety actions')),
                ('vulnerability_factors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='e.g. disability, migration_status', size=None)),
                ('case', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='protection_details', to='cases.case')),
            ],
            options={
                'verbose_name': 'Protection Detail',
                'verbose_name_plural': 'Protection Details',
            },
        ),
        migrations.CreateModel(
            name='SafetyPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emergency_contacts', models.JSONField(default=list, help_text='List of safe contacts')),
                ('safety_actions', models.JSONField(default=list, help_text='Specific safety measures')),
                ('warning_signs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Danger indicators', size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('case', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='safety_plan', to='cases.case')),
            ],
            options={
                'verbose_name': 'Safety Plan',
                'verbose_name_plural': 'Safety Plans',
            },
        ),
        migrations.CreateModel(
            name='CaseDocument',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('document_type', models.CharField(choices=[('medical', 'Medical Report'), ('police', 'Police Report'), ('consent', 'Consent Form'), ('other', 'Other')], default='other', max_length=20)),
                ('file', models.FileField(upload_to='case_documents/%Y/%m/%d/')),
                ('description', models.TextField(blank=True)),
                ('is_confidential', models.BooleanField(default=False, help_text='Whether document contains sensitive information')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='cases.case')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Document',
                'verbose_name_plural': 'Case Documents',
                'indexes': [models.Index(fields=['document_type'], name='cases_cased_documen_defc5f_idx'), models.Index(fields=['is_confidential'], name='cases_cased_is_conf_6456e3_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='casestatus',
            index=models.Index(fields=['code'], name='cases_cases_code_3d6ee8_idx'),
        ),
        migrations.AddIndex(
            model_name='casestatus',
            index=models.Index(fields=['is_active'], name='cases_cases_is_acti_0b6b05_idx'),
        ),
        migrations.AddIndex(
            model_name='casestatus',
            index=models.Index(fields=['is_closed'], name='cases_cases_is_clos_19b208_idx'),
        ),
        migrations.AddIndex(
            model_name='casetype',
            index=models.Index(fields=['category'], name='cases_caset_categor_02c423_idx'),
        ),
        migrations.AddIndex(
            model_name='casetype',
            index=models.Index(fields=['requires_immediate_response'], name='cases_caset_require_a4dd86_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_type'], name='cases_case_case_ty_0a44c3_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['status'], name='cases_case_status__3f7d8a_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['priority'], name='cases_case_priorit_474e7d_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['survivor_code'], name='cases_case_survivo_f7066a_idx'),
        ),
    ]
