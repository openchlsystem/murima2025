# Generated by Django 5.2.1 on 2025-06-08 19:50

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('case_number', models.CharField(editable=False, help_text='Auto-generated case number for reference', max_length=50, unique=True)),
                ('title', models.CharField(help_text='Short title describing the case', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the case')),
                ('priority', models.PositiveSmallIntegerField(choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low'), (5, 'Very Low')], default=3, help_text='Priority level of the case')),
                ('due_date', models.DateTimeField(blank=True, help_text='Date by which the case should be resolved', null=True)),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the case was marked as resolved', null=True)),
                ('sla_expires_at', models.DateTimeField(blank=True, help_text='When the SLA for this case expires', null=True)),
                ('is_high_priority', models.BooleanField(default=False, help_text='Flag for cases that require special attention')),
                ('is_confidential', models.BooleanField(default=False, help_text='Whether this case contains sensitive information')),
                ('source_channel', models.CharField(blank=True, help_text='Channel through which the case was created (email, web, phone, etc.)', max_length=50)),
                ('reference_id', models.CharField(blank=True, help_text='External reference ID for this case', max_length=100)),
                ('custom_fields', models.JSONField(blank=True, default=dict, help_text='Custom field values for this case')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Tags for categorizing and filtering cases', size=None)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='User currently assigned to this case', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assigned_cases', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved the case', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_cases', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseDocument',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('file', models.FileField(help_text='The document file', upload_to='case_documents/%Y/%m/%d/')),
                ('description', models.TextField(blank=True, help_text='Description of the document')),
                ('file_type', models.CharField(blank=True, help_text='File type (extension)', max_length=50)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number of this document')),
                ('is_current', models.BooleanField(default=True, help_text='Whether this is the current version')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the document')),
                ('case', models.ForeignKey(help_text='Case this document belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='case_documents', to='cases.case')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded this document', on_delete=django.db.models.deletion.PROTECT, related_name='uploaded_case_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Document',
                'verbose_name_plural': 'Case Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseLink',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('relationship_type', models.CharField(choices=[('RELATED', 'Related To'), ('DUPLICATE', 'Duplicate Of'), ('BLOCKS', 'Blocks'), ('BLOCKED_BY', 'Blocked By'), ('PARENT', 'Parent Of'), ('CHILD', 'Child Of'), ('MERGED', 'Merged From'), ('SPLIT', 'Split From'), ('FOLLOWUP', 'Follow-up To')], help_text='Type of relationship between the cases', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the relationship')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('source_case', models.ForeignKey(help_text='The source case in this relationship', on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_links', to='cases.case')),
                ('target_case', models.ForeignKey(help_text='The target case in this relationship', on_delete=django.db.models.deletion.CASCADE, related_name='incoming_links', to='cases.case')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Link',
                'verbose_name_plural': 'Case Links',
            },
        ),
        migrations.CreateModel(
            name='CaseNote',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('content', models.TextField(help_text='The note content')),
                ('is_internal', models.BooleanField(default=False, help_text='Whether this note is internal only (not visible to customers)')),
                ('pinned', models.BooleanField(default=False, help_text='Whether this note is pinned to the top')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the note')),
                ('case', models.ForeignKey(help_text='Case this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='cases.case')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('reply_to', models.ForeignKey(blank=True, help_text='If this is a reply, the note being replied to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='cases.casenote')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Note',
                'verbose_name_plural': 'Case Notes',
                'ordering': ['-pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseStatus',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text="Name of the status (e.g., 'Open', 'In Progress')", max_length=50)),
                ('code', models.SlugField(help_text='Short code for the status', max_length=30, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this status')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this status is available for use')),
                ('is_closed', models.BooleanField(default=False, help_text='Whether this status represents a closed case')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default status for new cases')),
                ('color', models.CharField(blank=True, help_text='Color code to represent this status', max_length=20)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Order in which statuses should be displayed')),
                ('allowed_next_statuses', models.ManyToManyField(blank=True, help_text='Statuses that can follow this one in workflow', to='cases.casestatus')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Status',
                'verbose_name_plural': 'Case Statuses',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CaseHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('action', models.CharField(choices=[('CREATE', 'Case Created'), ('STATUS_CHANGE', 'Status Changed'), ('ASSIGNMENT', 'Assignment Changed'), ('PRIORITY_CHANGE', 'Priority Changed'), ('NOTE_ADDED', 'Note Added'), ('DOCUMENT_ADDED', 'Document Added'), ('FIELD_UPDATE', 'Field Updated'), ('MERGE', 'Case Merged'), ('LINK', 'Case Linked'), ('ESCALATE', 'Case Escalated'), ('SLA_UPDATE', 'SLA Updated'), ('DUE_DATE_UPDATE', 'Due Date Updated')], help_text='Type of action performed', max_length=50)),
                ('from_priority', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low'), (5, 'Very Low')], help_text='Previous priority (for priority changes)', null=True)),
                ('to_priority', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low'), (5, 'Very Low')], help_text='New priority (for priority changes)', null=True)),
                ('comment', models.TextField(blank=True, help_text='Additional comments about this change')),
                ('changes', models.JSONField(blank=True, default=dict, help_text='Detailed changes in JSON format')),
                ('case', models.ForeignKey(help_text='Case this history item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='history', to='cases.case')),
                ('changed_by', models.ForeignKey(help_text='User who performed this action', on_delete=django.db.models.deletion.PROTECT, related_name='case_changes', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('from_assignment', models.ForeignKey(blank=True, help_text='Previous assignee (for assignment changes)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history_from_assignment', to=settings.AUTH_USER_MODEL)),
                ('related_document', models.ForeignKey(blank=True, help_text='Related document (for document-related actions)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cases.casedocument')),
                ('to_assignment', models.ForeignKey(blank=True, help_text='New assignee (for assignment changes)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history_to_assignment', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('related_note', models.ForeignKey(blank=True, help_text='Related note (for note-related actions)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cases.casenote')),
                ('from_status', models.ForeignKey(blank=True, help_text='Previous status (for status changes)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='history_from', to='cases.casestatus')),
                ('to_status', models.ForeignKey(blank=True, help_text='New status (for status changes)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='history_to', to='cases.casestatus')),
            ],
            options={
                'verbose_name': 'Case History',
                'verbose_name_plural': 'Case Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='case',
            name='status',
            field=models.ForeignKey(help_text='Current status of the case', on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='cases.casestatus'),
        ),
        migrations.CreateModel(
            name='CaseType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text="Name of the case type (e.g., 'Complaint', 'Support Ticket')", max_length=100)),
                ('code', models.SlugField(help_text='Short code for the case type', unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this case type')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this case type is active and available for use')),
                ('icon', models.CharField(blank=True, help_text='Icon to represent this case type in the UI', max_length=50)),
                ('color', models.CharField(blank=True, help_text='Color code to represent this case type', max_length=20)),
                ('default_priority', models.PositiveSmallIntegerField(default=3, help_text='Default priority for cases of this type (1-5, 1 being highest)')),
                ('default_sla_hours', models.PositiveIntegerField(default=72, help_text='Default SLA in hours for this case type')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional configuration for this case type')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Case Type',
                'verbose_name_plural': 'Case Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CaseTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of this template', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of when to use this template')),
                ('default_priority', models.PositiveSmallIntegerField(choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low'), (5, 'Very Low')], default=3, help_text='Default priority for cases created from this template')),
                ('default_sla_hours', models.PositiveIntegerField(blank=True, help_text='Default SLA in hours for cases from this template', null=True)),
                ('content', models.TextField(blank=True, help_text='Template content for the case description')),
                ('custom_fields', models.JSONField(blank=True, default=dict, help_text='Default values for custom fields')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is available for use')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('default_assignee', models.ForeignKey(blank=True, help_text='Default assignee for cases created from this template', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('default_status', models.ForeignKey(help_text='Default status for cases created from this template', on_delete=django.db.models.deletion.PROTECT, to='cases.casestatus')),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('case_type', models.ForeignKey(help_text='Case type this template is for', on_delete=django.db.models.deletion.PROTECT, related_name='templates', to='cases.casetype')),
            ],
            options={
                'verbose_name': 'Case Template',
                'verbose_name_plural': 'Case Templates',
                'ordering': ['case_type', 'name'],
            },
        ),
        migrations.AddField(
            model_name='case',
            name='case_type',
            field=models.ForeignKey(help_text='Type of this case', on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='cases.casetype'),
        ),
        migrations.CreateModel(
            name='SLA',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of this SLA policy', max_length=100)),
                ('priority', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low'), (5, 'Very Low')], help_text='Priority level this SLA applies to (null for all priorities)', null=True)),
                ('response_time_hours', models.PositiveIntegerField(help_text='Expected response time in hours')),
                ('resolution_time_hours', models.PositiveIntegerField(help_text='Expected resolution time in hours')),
                ('business_hours_only', models.BooleanField(default=False, help_text='Whether SLA only counts during business hours')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this SLA policy is active')),
                ('description', models.TextField(blank=True, help_text='Description of this SLA policy')),
                ('escalation_path', models.JSONField(blank=True, default=list, help_text='Escalation path when SLA is breached')),
                ('case_type', models.ForeignKey(blank=True, help_text='Case type this SLA applies to (null for all types)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slas', to='cases.casetype')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SLA',
                'verbose_name_plural': 'SLAs',
                'ordering': ['case_type', 'priority'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowRule',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of this workflow rule', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of what this rule does')),
                ('priority', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low'), (5, 'Very Low')], help_text='Priority level this rule applies to (null for all priorities)', null=True)),
                ('trigger_condition', models.CharField(choices=[('STATUS_CHANGE', 'Status Change'), ('PRIORITY_CHANGE', 'Priority Change'), ('ASSIGNMENT_CHANGE', 'Assignment Change'), ('CREATION', 'Case Creation'), ('DUE_DATE_APPROACHING', 'Due Date Approaching'), ('SLA_BREACHED', 'SLA Breached'), ('FIELD_UPDATE', 'Field Updated'), ('NOTE_ADDED', 'Note Added'), ('DOCUMENT_ADDED', 'Document Added')], help_text='When this rule should be triggered', max_length=50)),
                ('condition_expression', models.JSONField(blank=True, default=dict, help_text='Additional conditions for rule execution')),
                ('action_type', models.CharField(choices=[('CHANGE_STATUS', 'Change Status'), ('CHANGE_PRIORITY', 'Change Priority'), ('ASSIGN_TO_USER', 'Assign to User'), ('ASSIGN_TO_TEAM', 'Assign to Team'), ('SEND_NOTIFICATION', 'Send Notification'), ('CREATE_TASK', 'Create Task'), ('ESCALATE', 'Escalate Case'), ('RUN_SCRIPT', 'Run Custom Script')], help_text='Action to perform when rule is triggered', max_length=50)),
                ('action_parameters', models.JSONField(blank=True, default=dict, help_text='Parameters for the action')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is active')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Execution order when multiple rules apply')),
                ('case_type', models.ForeignKey(blank=True, help_text='Case type this rule applies to (null for all types)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workflow_rules', to='cases.casetype')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Workflow Rule',
                'verbose_name_plural': 'Workflow Rules',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='casedocument',
            index=models.Index(fields=['case'], name='cases_cased_case_id_913dd0_idx'),
        ),
        migrations.AddIndex(
            model_name='casedocument',
            index=models.Index(fields=['uploaded_by'], name='cases_cased_uploade_96570f_idx'),
        ),
        migrations.AddIndex(
            model_name='casedocument',
            index=models.Index(fields=['file_type'], name='cases_cased_file_ty_3f5db3_idx'),
        ),
        migrations.AddIndex(
            model_name='caselink',
            index=models.Index(fields=['source_case'], name='cases_casel_source__11534e_idx'),
        ),
        migrations.AddIndex(
            model_name='caselink',
            index=models.Index(fields=['target_case'], name='cases_casel_target__44ed4f_idx'),
        ),
        migrations.AddIndex(
            model_name='caselink',
            index=models.Index(fields=['relationship_type'], name='cases_casel_relatio_f96323_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='caselink',
            unique_together={('source_case', 'target_case', 'relationship_type')},
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['case'], name='cases_casen_case_id_59d80f_idx'),
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['is_internal'], name='cases_casen_is_inte_aa7d34_idx'),
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['pinned'], name='cases_casen_pinned_03c4d9_idx'),
        ),
        migrations.AddIndex(
            model_name='casestatus',
            index=models.Index(fields=['code'], name='cases_cases_code_3d6ee8_idx'),
        ),
        migrations.AddIndex(
            model_name='casestatus',
            index=models.Index(fields=['is_active'], name='cases_cases_is_acti_0b6b05_idx'),
        ),
        migrations.AddIndex(
            model_name='casestatus',
            index=models.Index(fields=['is_closed'], name='cases_cases_is_clos_19b208_idx'),
        ),
        migrations.AddIndex(
            model_name='casehistory',
            index=models.Index(fields=['case'], name='cases_caseh_case_id_da06e8_idx'),
        ),
        migrations.AddIndex(
            model_name='casehistory',
            index=models.Index(fields=['action'], name='cases_caseh_action_0fb84d_idx'),
        ),
        migrations.AddIndex(
            model_name='casehistory',
            index=models.Index(fields=['changed_by'], name='cases_caseh_changed_4a6669_idx'),
        ),
        migrations.AddIndex(
            model_name='casetype',
            index=models.Index(fields=['code'], name='cases_caset_code_0eeadf_idx'),
        ),
        migrations.AddIndex(
            model_name='casetype',
            index=models.Index(fields=['is_active'], name='cases_caset_is_acti_d8c1ea_idx'),
        ),
        migrations.AddIndex(
            model_name='casetemplate',
            index=models.Index(fields=['case_type'], name='cases_caset_case_ty_186f8e_idx'),
        ),
        migrations.AddIndex(
            model_name='casetemplate',
            index=models.Index(fields=['is_active'], name='cases_caset_is_acti_089360_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_number'], name='cases_case_case_nu_a07304_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_type'], name='cases_case_case_ty_0a44c3_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['status'], name='cases_case_status__3f7d8a_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['priority'], name='cases_case_priorit_474e7d_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['assigned_to'], name='cases_case_assigne_8931bc_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['due_date'], name='cases_case_due_dat_c8e5f4_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['is_high_priority'], name='cases_case_is_high_51191c_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['is_confidential'], name='cases_case_is_conf_b7c555_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['tags'], name='cases_case_tags_514478_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['created_at'], name='cases_case_created_a9dee7_idx'),
        ),
        migrations.AddIndex(
            model_name='sla',
            index=models.Index(fields=['case_type'], name='cases_sla_case_ty_2dc611_idx'),
        ),
        migrations.AddIndex(
            model_name='sla',
            index=models.Index(fields=['priority'], name='cases_sla_priorit_2b4f96_idx'),
        ),
        migrations.AddIndex(
            model_name='sla',
            index=models.Index(fields=['is_active'], name='cases_sla_is_acti_9e3402_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sla',
            unique_together={('case_type', 'priority')},
        ),
        migrations.AddIndex(
            model_name='workflowrule',
            index=models.Index(fields=['case_type'], name='cases_workf_case_ty_696114_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrule',
            index=models.Index(fields=['priority'], name='cases_workf_priorit_f80abc_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrule',
            index=models.Index(fields=['trigger_condition'], name='cases_workf_trigger_ebcba4_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrule',
            index=models.Index(fields=['is_active'], name='cases_workf_is_acti_fd16ba_idx'),
        ),
    ]
