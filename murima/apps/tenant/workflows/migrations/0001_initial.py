# Generated by Django 5.2.1 on 2025-06-08 19:50

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of this stage', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of what happens in this stage')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of this stage in the workflow')),
                ('is_final', models.BooleanField(default=False, help_text='Whether this is a final/terminal stage')),
                ('required_approvals', models.PositiveIntegerField(default=0, help_text='Number of required approvals to progress')),
                ('assignment_policy', models.CharField(choices=[('MANUAL', 'Manual Assignment'), ('ROLE_BASED', 'Role Based'), ('SELF', 'Case Creator'), ('PREVIOUS', 'Previous Assignee'), ('TEAM', 'Team Based')], default='MANUAL', help_text='How assignees are determined for this stage', max_length=20)),
                ('assignment_config', models.JSONField(blank=True, default=dict, help_text='Configuration for assignment policy')),
                ('actions', models.JSONField(blank=True, default=list, help_text='Automated actions to execute when entering this stage')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional configuration for this stage')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['workflow', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SLA',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of this SLA', max_length=100)),
                ('duration_hours', models.PositiveIntegerField(help_text='Expected duration in hours')),
                ('business_hours_only', models.BooleanField(default=False, help_text='Whether SLA only counts during business hours')),
                ('escalation_path', models.JSONField(blank=True, default=list, help_text='Steps to take when SLA is breached')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional configuration for this SLA')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('stage', models.ForeignKey(help_text='Stage this SLA applies to', on_delete=django.db.models.deletion.CASCADE, related_name='workflow_slas', to='workflows.stage')),
            ],
            options={
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='StageInstance',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('entered_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this stage was entered')),
                ('exited_at', models.DateTimeField(blank=True, help_text='When this stage was exited', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('ESCALATED', 'Escalated')], default='PENDING', help_text='Current status of this stage instance', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional state information for this stage')),
                ('assignees', models.ManyToManyField(help_text='Users assigned to this stage instance', related_name='assigned_stages', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('stage', models.ForeignKey(help_text='Stage definition', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='workflows.stage')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-entered_at'],
            },
        ),
        migrations.CreateModel(
            name='Escalation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('escalated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the escalation occurred')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the escalation was resolved', null=True)),
                ('actions_taken', models.JSONField(blank=True, default=list, help_text='Actions taken during escalation')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional context about this escalation')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('sla', models.ForeignKey(help_text='SLA that was breached', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='workflows.sla')),
                ('stage_instance', models.ForeignKey(help_text='Stage instance that was escalated', on_delete=django.db.models.deletion.CASCADE, related_name='escalations', to='workflows.stageinstance')),
            ],
            options={
                'ordering': ['-escalated_at'],
            },
        ),
        migrations.CreateModel(
            name='Transition',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(blank=True, help_text='Name for this transition', max_length=100)),
                ('condition', models.JSONField(blank=True, default=dict, help_text='Condition expression for this transition')),
                ('actions', models.JSONField(blank=True, default=list, help_text='Actions to execute when this transition occurs')),
                ('require_comment', models.BooleanField(default=False, help_text='Whether a comment is required to perform this transition')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional configuration for this transition')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('source_stage', models.ForeignKey(help_text='Stage this transition comes from', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_out', to='workflows.stage')),
                ('target_stage', models.ForeignKey(help_text='Stage this transition goes to', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_in', to='workflows.stage')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['source_stage__order', 'target_stage__order'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowInstance',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('object_id', models.UUIDField(help_text='ID of the object this workflow is for')),
                ('is_complete', models.BooleanField(default=False, help_text='Whether this workflow has reached a final stage')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional state information for this instance')),
                ('content_type', models.ForeignKey(help_text='Type of the object this workflow is for', on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('current_stage', models.ForeignKey(help_text='Current stage of this workflow instance', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='workflows.stage')),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransitionLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('comment', models.TextField(blank=True, help_text='Optional comment about the transition')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional context about this transition')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('from_stage', models.ForeignKey(help_text='Stage transitioned from', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='workflows.stage')),
                ('performed_by', models.ForeignKey(help_text='User who performed the transition', on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('to_stage', models.ForeignKey(help_text='Stage transitioned to', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='workflows.stage')),
                ('transition', models.ForeignKey(help_text='Transition definition', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='workflows.transition')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('workflow_instance', models.ForeignKey(help_text='Workflow instance this transition belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='transition_logs', to='workflows.workflowinstance')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='stageinstance',
            name='workflow_instance',
            field=models.ForeignKey(help_text='Workflow instance this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='stage_instances', to='workflows.workflowinstance'),
        ),
        migrations.CreateModel(
            name='WorkflowTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of this workflow template', max_length=100)),
                ('description', models.TextField(blank=True, help_text="Description of this workflow's purpose")),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is available for use')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional configuration for this workflow')),
                ('content_type', models.ForeignKey(help_text='Type of object this workflow applies to', limit_choices_to=models.Q(('app_label', 'cases'), ('app_label', 'tasks'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(help_text='User who created this record', on_delete=django.db.models.deletion.PROTECT, related_name='created_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('start_stage', models.ForeignKey(blank=True, help_text='Initial stage for new workflow instances', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='workflows.stage')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_records_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='workflowinstance',
            name='workflow',
            field=models.ForeignKey(help_text='Template this instance is based on', on_delete=django.db.models.deletion.PROTECT, related_name='instances', to='workflows.workflowtemplate'),
        ),
        migrations.AddField(
            model_name='stage',
            name='workflow',
            field=models.ForeignKey(help_text='Workflow this stage belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='workflows.workflowtemplate'),
        ),
        migrations.AddIndex(
            model_name='sla',
            index=models.Index(fields=['business_hours_only'], name='workflows_s_busines_ddd888_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sla',
            unique_together={('stage', 'name')},
        ),
        migrations.AddIndex(
            model_name='escalation',
            index=models.Index(fields=['stage_instance'], name='workflows_e_stage_i_2c3ceb_idx'),
        ),
        migrations.AddIndex(
            model_name='escalation',
            index=models.Index(fields=['resolved_at'], name='workflows_e_resolve_89f6c3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='transition',
            unique_together={('source_stage', 'target_stage')},
        ),
        migrations.AddIndex(
            model_name='transitionlog',
            index=models.Index(fields=['workflow_instance'], name='workflows_t_workflo_b0e56b_idx'),
        ),
        migrations.AddIndex(
            model_name='transitionlog',
            index=models.Index(fields=['transition'], name='workflows_t_transit_87aabe_idx'),
        ),
        migrations.AddIndex(
            model_name='stageinstance',
            index=models.Index(fields=['status'], name='workflows_s_status_019aba_idx'),
        ),
        migrations.AddIndex(
            model_name='stageinstance',
            index=models.Index(fields=['entered_at'], name='workflows_s_entered_cb912c_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtemplate',
            index=models.Index(fields=['content_type'], name='workflows_w_content_036508_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtemplate',
            index=models.Index(fields=['is_active'], name='workflows_w_is_acti_9c9dc2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowtemplate',
            unique_together={('name',)},
        ),
        migrations.AddIndex(
            model_name='workflowinstance',
            index=models.Index(fields=['content_type', 'object_id'], name='workflows_w_content_9e540a_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowinstance',
            index=models.Index(fields=['is_complete'], name='workflows_w_is_comp_a97cd6_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowinstance',
            index=models.Index(fields=['current_stage'], name='workflows_w_current_a535c6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowinstance',
            unique_together={('content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='stage',
            index=models.Index(fields=['is_final'], name='workflows_s_is_fina_d0dd71_idx'),
        ),
        migrations.AddIndex(
            model_name='stage',
            index=models.Index(fields=['assignment_policy'], name='workflows_s_assignm_080a46_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stage',
            unique_together={('workflow', 'name'), ('workflow', 'order')},
        ),
    ]
