# Generated by Django 5.2.1 on 2025-06-05 13:47

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CallCallback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('callback_number', models.CharField(max_length=50, verbose_name='Callback Number')),
                ('scheduled_time', models.DateTimeField(verbose_name='Scheduled Time')),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('scheduled', 'Scheduled'), ('attempted', 'Attempted'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='requested', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('reason', models.TextField(blank=True, help_text='Reason for callback request', verbose_name='Reason')),
                ('attempted_count', models.PositiveIntegerField(default=0, help_text='Number of callback attempts made', verbose_name='Attempt Count')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum number of callback attempts', verbose_name='Max Attempts')),
                ('last_attempt', models.DateTimeField(blank=True, null=True, verbose_name='Last Attempt')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
            ],
            options={
                'verbose_name': 'Call Callback',
                'verbose_name_plural': 'Call Callbacks',
                'ordering': ['scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='CallDisposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('notes', models.TextField(blank=True, help_text='Additional disposition notes', verbose_name='Notes')),
                ('case_created', models.BooleanField(default=False, help_text='Whether this call resulted in a case', verbose_name='Case Created')),
                ('follow_up_required', models.BooleanField(default=False, verbose_name='Follow-up Required')),
                ('follow_up_date', models.DateTimeField(blank=True, null=True, verbose_name='Follow-up Date')),
                ('callback_requested', models.BooleanField(default=False, verbose_name='Callback Requested')),
                ('callback_number', models.CharField(blank=True, max_length=50, verbose_name='Callback Number')),
                ('ai_confidence_score', models.FloatField(blank=True, help_text='Confidence score for AI suggestion (0.0 to 1.0)', null=True, verbose_name='AI Confidence Score')),
                ('legacy_disposition_id', models.IntegerField(blank=True, db_index=True, help_text='Original disposition table ID', null=True, verbose_name='Legacy Disposition ID')),
            ],
            options={
                'verbose_name': 'Call Disposition',
                'verbose_name_plural': 'Call Dispositions',
            },
        ),
        migrations.CreateModel(
            name='CallEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('event_type', models.CharField(choices=[('dial', 'Dial'), ('ring', 'Ring'), ('answer', 'Answer'), ('hold', 'Hold'), ('unhold', 'Unhold'), ('mute', 'Mute'), ('unmute', 'Unmute'), ('transfer', 'Transfer'), ('conference', 'Conference'), ('hangup', 'Hangup'), ('bridge', 'Bridge'), ('unbridge', 'Unbridge'), ('queue_join', 'Queue Join'), ('queue_leave', 'Queue Leave'), ('agent_connect', 'Agent Connect'), ('ivr_menu', 'IVR Menu'), ('dtmf', 'DTMF Input'), ('recording_start', 'Recording Start'), ('recording_stop', 'Recording Stop')], max_length=20, verbose_name='Event Type')),
                ('event_time', models.DateTimeField(help_text='When this event occurred', verbose_name='Event Time')),
                ('description', models.TextField(blank=True, help_text='Additional event details', verbose_name='Description')),
                ('data', models.JSONField(blank=True, default=dict, help_text='Additional structured data for the event', verbose_name='Event Data')),
            ],
            options={
                'verbose_name': 'Call Event',
                'verbose_name_plural': 'Call Events',
                'ordering': ['call', 'event_time'],
            },
        ),
        migrations.CreateModel(
            name='CallNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('note_type', models.CharField(choices=[('agent', 'Agent Note'), ('supervisor', 'Supervisor Note'), ('system', 'System Note'), ('quality', 'Quality Note'), ('follow_up', 'Follow-up Note')], default='agent', max_length=20, verbose_name='Note Type')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('content', models.TextField(help_text='Note content', verbose_name='Content')),
                ('is_private', models.BooleanField(default=False, help_text='Whether this note is private to supervisors only', verbose_name='Is Private')),
                ('is_important', models.BooleanField(default=False, help_text='Mark this note as important', verbose_name='Is Important')),
            ],
            options={
                'verbose_name': 'Call Note',
                'verbose_name_plural': 'Call Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CallQualityAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('overall_score', models.FloatField(help_text='Overall quality score (0.0 to 100.0)', verbose_name='Overall Score')),
                ('opening_score', models.FloatField(blank=True, null=True, verbose_name='Opening Score')),
                ('listening_score', models.FloatField(blank=True, null=True, verbose_name='Listening Score')),
                ('resolution_score', models.FloatField(blank=True, null=True, verbose_name='Resolution Score')),
                ('closing_score', models.FloatField(blank=True, null=True, verbose_name='Closing Score')),
                ('professionalism_score', models.FloatField(blank=True, null=True, verbose_name='Professionalism Score')),
                ('strengths', models.TextField(blank=True, help_text='Positive aspects of the call', verbose_name='Strengths')),
                ('improvements', models.TextField(blank=True, help_text='Areas where agent can improve', verbose_name='Areas for Improvement')),
                ('comments', models.TextField(blank=True, help_text='Additional assessor comments', verbose_name='Comments')),
                ('is_calibrated', models.BooleanField(default=False, help_text='Whether this assessment was calibrated with other assessors', verbose_name='Is Calibrated')),
                ('legacy_qa_id', models.IntegerField(blank=True, db_index=True, help_text='Original qa table ID', null=True, verbose_name='Legacy QA ID')),
            ],
            options={
                'verbose_name': 'Call Quality Assessment',
                'verbose_name_plural': 'Call Quality Assessments',
            },
        ),
        migrations.CreateModel(
            name='CallTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('transfer_type', models.CharField(choices=[('blind', 'Blind Transfer'), ('attended', 'Attended Transfer'), ('conference', 'Conference Transfer')], max_length=20, verbose_name='Transfer Type')),
                ('transfer_reason', models.CharField(choices=[('escalation', 'Escalation'), ('expertise', 'Requires Expertise'), ('department', 'Wrong Department'), ('supervisor', 'Supervisor Request'), ('technical', 'Technical Issue'), ('language', 'Language Barrier'), ('other', 'Other')], max_length=20, verbose_name='Transfer Reason')),
                ('to_queue', models.CharField(blank=True, help_text='Queue transferred to if not to specific agent', max_length=100, verbose_name='To Queue')),
                ('transfer_time', models.DateTimeField(verbose_name='Transfer Time')),
                ('success', models.BooleanField(default=True, verbose_name='Transfer Successful')),
                ('notes', models.TextField(blank=True, verbose_name='Transfer Notes')),
            ],
            options={
                'verbose_name': 'Call Transfer',
                'verbose_name_plural': 'Call Transfers',
                'ordering': ['-transfer_time'],
            },
        ),
        migrations.CreateModel(
            name='Call',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('unique_id', models.CharField(db_index=True, help_text='Asterisk unique call identifier', max_length=255, unique=True, verbose_name='Unique ID')),
                ('caller_number', models.CharField(db_index=True, help_text='Phone number of the caller', max_length=50, verbose_name='Caller Number')),
                ('caller_name', models.CharField(blank=True, help_text='Caller ID name if available', max_length=255, verbose_name='Caller Name')),
                ('called_number', models.CharField(help_text='Phone number that was called', max_length=50, verbose_name='Called Number')),
                ('call_direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound'), ('internal', 'Internal')], db_index=True, max_length=10, verbose_name='Call Direction')),
                ('vector', models.CharField(blank=True, choices=[('0', 'Outbound'), ('1', 'Inbound'), ('2', 'Internal')], help_text='Legacy direction indicator - to be removed post-migration', max_length=2, verbose_name='Vector (Legacy)')),
                ('start_time', models.DateTimeField(db_index=True, help_text='When the call was initiated', verbose_name='Start Time')),
                ('answer_time', models.DateTimeField(blank=True, help_text='When the call was answered', null=True, verbose_name='Answer Time')),
                ('end_time', models.DateTimeField(blank=True, help_text='When the call ended', null=True, verbose_name='End Time')),
                ('ring_duration', models.DurationField(blank=True, help_text='Time from start to answer', null=True, verbose_name='Ring Duration')),
                ('talk_duration', models.DurationField(blank=True, help_text='Time spent talking', null=True, verbose_name='Talk Duration')),
                ('hold_duration', models.DurationField(blank=True, help_text='Total time on hold', null=True, verbose_name='Hold Duration')),
                ('wait_duration', models.DurationField(blank=True, help_text='Time waiting in queue', null=True, verbose_name='Wait Duration')),
                ('total_duration', models.DurationField(blank=True, help_text='Total call duration from start to end', null=True, verbose_name='Total Duration')),
                ('call_status', models.CharField(choices=[('ringing', 'Ringing'), ('answered', 'Answered'), ('busy', 'Busy'), ('no_answer', 'No Answer'), ('failed', 'Failed'), ('abandoned', 'Abandoned'), ('completed', 'Completed'), ('transferred', 'Transferred'), ('conference', 'Conference'), ('hold', 'On Hold')], db_index=True, default='ringing', max_length=20, verbose_name='Call Status')),
                ('hangup_reason', models.CharField(blank=True, choices=[('normal', 'Normal Hangup'), ('busy', 'Busy'), ('noanswer', 'No Answer'), ('cancel', 'Cancelled'), ('congestion', 'Congestion'), ('chanunavail', 'Channel Unavailable'), ('timeout', 'Timeout'), ('rejected', 'Rejected'), ('unallocated', 'Unallocated Number'), ('normal_clearing', 'Normal Clearing'), ('user_busy', 'User Busy'), ('no_user_response', 'No User Response'), ('no_answer', 'No Answer'), ('subscriber_absent', 'Subscriber Absent'), ('call_rejected', 'Call Rejected'), ('number_changed', 'Number Changed'), ('destination_out_of_order', 'Destination Out of Order'), ('invalid_number_format', 'Invalid Number Format'), ('facility_rejected', 'Facility Rejected'), ('response_to_status_enquiry', 'Response to Status Enquiry'), ('normal_unspecified', 'Normal Unspecified'), ('normal_circuit_congestion', 'Normal Circuit Congestion'), ('network_out_of_order', 'Network Out of Order'), ('normal_temporary_failure', 'Normal Temporary Failure'), ('switch_congestion', 'Switch Congestion'), ('access_info_discarded', 'Access Info Discarded'), ('requested_chan_unavail', 'Requested Channel Unavailable'), ('pre_empted', 'Pre-empted'), ('facility_not_subscribed', 'Facility Not Subscribed'), ('outgoing_call_barred', 'Outgoing Call Barred'), ('incoming_call_barred', 'Incoming Call Barred'), ('bearercapability_notauth', 'Bearer Capability Not Authorized'), ('bearercapability_notavail', 'Bearer Capability Not Available'), ('bearercapability_notimpl', 'Bearer Capability Not Implemented'), ('chan_not_implemented', 'Channel Not Implemented'), ('facility_not_implemented', 'Facility Not Implemented'), ('invalid_call_reference', 'Invalid Call Reference'), ('incompatible_destination', 'Incompatible Destination'), ('invalid_msg_unspecified', 'Invalid Message Unspecified'), ('mandatory_ie_missing', 'Mandatory IE Missing'), ('message_type_nonexist', 'Message Type Non-existent'), ('wrong_message', 'Wrong Message'), ('ie_nonexist', 'IE Non-existent'), ('invalid_ie_contents', 'Invalid IE Contents'), ('wrong_call_state', 'Wrong Call State'), ('recovery_on_timer_expire', 'Recovery on Timer Expire'), ('mandatory_ie_length_error', 'Mandatory IE Length Error'), ('protocol_error', 'Protocol Error'), ('interworking', 'Interworking'), ('other', 'Other')], max_length=50, verbose_name='Hangup Reason')),
                ('audio_quality_score', models.FloatField(blank=True, help_text='Audio quality score (0.0 to 10.0)', null=True, verbose_name='Audio Quality Score')),
                ('trunk', models.CharField(blank=True, help_text='Trunk used for the call', max_length=50, verbose_name='Trunk')),
                ('channel', models.CharField(blank=True, help_text='Asterisk channel identifier', max_length=100, verbose_name='Channel')),
                ('context', models.CharField(blank=True, help_text='Asterisk dialplan context', max_length=100, verbose_name='Context')),
                ('extension', models.CharField(blank=True, help_text='Extension dialed', max_length=100, verbose_name='Extension')),
                ('bridge_id', models.CharField(blank=True, help_text='Asterisk bridge identifier', max_length=255, verbose_name='Bridge ID')),
                ('peer_channel', models.CharField(blank=True, help_text='Connected peer channel', max_length=100, verbose_name='Peer Channel')),
                ('recording_file', models.CharField(blank=True, help_text='Path to call recording file', max_length=500, verbose_name='Recording File')),
                ('recording_duration', models.DurationField(blank=True, null=True, verbose_name='Recording Duration')),
                ('sla_target_answer', models.PositiveIntegerField(blank=True, help_text='Target time to answer for SLA', null=True, verbose_name='SLA Target Answer (seconds)')),
                ('sla_target_abandon', models.PositiveIntegerField(blank=True, help_text='Target time before abandon for SLA', null=True, verbose_name='SLA Target Abandon (seconds)')),
                ('sla_met', models.BooleanField(blank=True, help_text='Whether call met SLA targets', null=True, verbose_name='SLA Met')),
                ('call_date', models.DateField(db_index=True, help_text='Date of the call (for reporting)', verbose_name='Call Date')),
                ('call_hour', models.PositiveSmallIntegerField(help_text='Hour of the call (0-23)', verbose_name='Call Hour')),
                ('call_day_of_week', models.PositiveSmallIntegerField(help_text='Day of week (0=Monday, 6=Sunday)', verbose_name='Day of Week')),
                ('ai_transcript', models.TextField(blank=True, help_text='AI-generated call transcript', verbose_name='AI Transcript')),
                ('ai_sentiment_score', models.FloatField(blank=True, help_text='AI-analyzed sentiment score (-1.0 to 1.0)', null=True, verbose_name='AI Sentiment Score')),
                ('ai_summary', models.TextField(blank=True, help_text='AI-generated call summary', verbose_name='AI Summary')),
                ('ai_categories', models.JSONField(blank=True, default=list, help_text='AI-suggested categories for the call', verbose_name='AI Categories')),
                ('ai_keywords', models.JSONField(blank=True, default=list, help_text='AI-extracted keywords from the call', verbose_name='AI Keywords')),
                ('ai_analysis_completed', models.BooleanField(default=False, help_text='Whether AI analysis has been completed', verbose_name='AI Analysis Completed')),
                ('ai_analysis_date', models.DateTimeField(blank=True, help_text='When AI analysis was completed', null=True, verbose_name='AI Analysis Date')),
                ('legacy_chan_id', models.IntegerField(blank=True, db_index=True, help_text='Original chan table ID - for migration tracking', null=True, verbose_name='Legacy Channel ID')),
                ('legacy_uniqueid2', models.CharField(blank=True, help_text='Legacy uid2 field - for migration tracking', max_length=50, verbose_name='Legacy Unique ID 2')),
                ('legacy_call_data', models.JSONField(blank=True, default=dict, help_text='Original call data for migration verification', verbose_name='Legacy Call Data')),
                ('migration_notes', models.TextField(blank=True, help_text='Notes about migration process or issues', verbose_name='Migration Notes')),
                ('migration_verified', models.BooleanField(default=False, help_text='Whether migration data has been verified', verbose_name='Migration Verified')),
                ('agent', models.ForeignKey(blank=True, help_text='Agent who handled the call', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_calls', to=settings.AUTH_USER_MODEL, verbose_name='Agent')),
            ],
            options={
                'verbose_name': 'Call',
                'verbose_name_plural': 'Calls',
                'ordering': ['-start_time'],
            },
        ),
    ]
