# Generated by Django 5.2.1 on 2025-06-05 18:01

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('campaigns', '0001_initial'),
        ('contacts', '0002_contactaddress_contactmergelog_contactphone_and_more'),
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('case_number', models.CharField(db_index=True, help_text='Unique case identifier', max_length=50, unique=True, verbose_name='Case Number')),
                ('reporter_is_afflicted', models.BooleanField(default=False, help_text='Whether the reporter is also the victim/client', verbose_name='Reporter is Affected')),
                ('escalation_date', models.DateTimeField(blank=True, null=True, verbose_name='Escalation Date')),
                ('title', models.CharField(blank=True, help_text='Brief title/summary of the case', max_length=255, verbose_name='Case Title')),
                ('narrative', models.TextField(help_text='Detailed description of the case', verbose_name='Narrative')),
                ('action_plan', models.TextField(blank=True, help_text='Planned actions to resolve the case', verbose_name='Action Plan')),
                ('incident_date', models.DateTimeField(blank=True, help_text='When the incident occurred', null=True, verbose_name='Incident Date')),
                ('incident_location', models.TextField(blank=True, help_text='Where the incident occurred', verbose_name='Incident Location')),
                ('report_location', models.TextField(blank=True, help_text='Where the case was reported', verbose_name='Report Location')),
                ('source_type', models.CharField(default='call', help_text='How the case was reported (call, email, etc.)', max_length=50, verbose_name='Source Type')),
                ('source_reference', models.CharField(blank=True, help_text='Reference to source (call ID, email, etc.)', max_length=255, verbose_name='Source Reference')),
                ('is_gbv_related', models.BooleanField(default=False, help_text='Whether this case involves gender-based violence', verbose_name='GBV Related')),
                ('medical_exam_done', models.BooleanField(default=False, help_text='Whether medical examination was conducted', verbose_name='Medical Exam Done')),
                ('incident_reported_to_police', models.BooleanField(default=False, help_text='Whether incident was reported to police', verbose_name='Reported to Police')),
                ('police_ob_number', models.CharField(blank=True, help_text='Police occurrence book number', max_length=100, verbose_name='Police OB Number')),
                ('hiv_tested', models.BooleanField(default=False, verbose_name='HIV Tested')),
                ('hiv_test_result', models.CharField(blank=True, max_length=50, verbose_name='HIV Test Result')),
                ('pep_given', models.BooleanField(default=False, help_text='Post-exposure prophylaxis provided', verbose_name='PEP Given')),
                ('art_given', models.BooleanField(default=False, help_text='Antiretroviral therapy provided', verbose_name='ART Given')),
                ('ecp_given', models.BooleanField(default=False, help_text='Emergency contraceptive pill provided', verbose_name='ECP Given')),
                ('counselling_given', models.BooleanField(default=False, verbose_name='Counselling Given')),
                ('counselling_organization', models.CharField(blank=True, max_length=255, verbose_name='Counselling Organization')),
                ('due_date', models.DateTimeField(blank=True, help_text='When case should be resolved by', null=True, verbose_name='Due Date')),
                ('closed_date', models.DateTimeField(blank=True, null=True, verbose_name='Closed Date')),
                ('resolution_summary', models.TextField(blank=True, help_text='Summary of how the case was resolved', verbose_name='Resolution Summary')),
                ('client_count', models.PositiveIntegerField(default=0, help_text='Number of clients/victims in this case', verbose_name='Client Count')),
                ('perpetrator_count', models.PositiveIntegerField(default=0, help_text='Number of perpetrators involved', verbose_name='Perpetrator Count')),
                ('incident_reference_number', models.CharField(blank=True, help_text='External reference number for the incident', max_length=100, verbose_name='Incident Reference Number')),
                ('ai_risk_score', models.FloatField(blank=True, help_text='AI-calculated risk score (0.0 to 1.0)', null=True, verbose_name='AI Risk Score')),
                ('ai_urgency_score', models.FloatField(blank=True, help_text='AI-calculated urgency score (0.0 to 1.0)', null=True, verbose_name='AI Urgency Score')),
                ('ai_summary', models.TextField(blank=True, help_text='AI-generated case summary', verbose_name='AI Summary')),
                ('ai_keywords', models.JSONField(blank=True, default=list, help_text='AI-extracted keywords from case content', verbose_name='AI Keywords')),
                ('ai_sentiment_score', models.FloatField(blank=True, help_text='AI-analyzed sentiment score (-1.0 to 1.0)', null=True, verbose_name='AI Sentiment Score')),
                ('ai_analysis_completed', models.BooleanField(default=False, verbose_name='AI Analysis Completed')),
                ('ai_analysis_date', models.DateTimeField(blank=True, null=True, verbose_name='AI Analysis Date')),
                ('legacy_case_id', models.IntegerField(blank=True, db_index=True, help_text='Original kase table ID', null=True, verbose_name='Legacy Case ID')),
                ('legacy_nsr', models.IntegerField(blank=True, help_text='Original NSR (case serial number)', null=True, verbose_name='Legacy NSR')),
                ('legacy_data', models.JSONField(blank=True, default=dict, help_text='Original case data for migration tracking', verbose_name='Legacy Data')),
                ('migration_notes', models.TextField(blank=True, verbose_name='Migration Notes')),
                ('ai_suggested_category', models.ForeignKey(blank=True, limit_choices_to={'category': 'case_category'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_suggested_cases', to='core.referencedata', verbose_name='AI Suggested Category')),
                ('ai_suggested_priority', models.ForeignKey(blank=True, limit_choices_to={'category': 'case_priority'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_suggested_priority_cases', to='core.referencedata', verbose_name='AI Suggested Priority')),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Current case handler', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_cases', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('case_type', models.ForeignKey(help_text='Primary case type/category', limit_choices_to={'category': 'case_type'}, on_delete=django.db.models.deletion.PROTECT, related_name='cases_by_type', to='core.referencedata', verbose_name='Case Type')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('escalated_by', models.ForeignKey(blank=True, help_text='Who escalated this case', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cases_escalated_by_me', to=settings.AUTH_USER_MODEL, verbose_name='Escalated By')),
                ('escalated_to', models.ForeignKey(blank=True, help_text='Supervisor or specialist the case is escalated to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_cases', to=settings.AUTH_USER_MODEL, verbose_name='Escalated To')),
                ('knows_about_116', models.ForeignKey(blank=True, help_text='How the reporter learned about the 116 service', limit_choices_to={'category': 'knowledge_source'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cases_by_knowledge_source', to='core.referencedata', verbose_name='How did you know about 116?')),
                ('priority', models.ForeignKey(limit_choices_to={'category': 'case_priority'}, on_delete=django.db.models.deletion.PROTECT, related_name='cases_by_priority', to='core.referencedata', verbose_name='Priority')),
                ('reporter', models.ForeignKey(help_text='Person who reported this case', on_delete=django.db.models.deletion.PROTECT, related_name='reported_cases', to='contacts.contact', verbose_name='Reporter')),
                ('source_channel', models.ForeignKey(blank=True, help_text='Campaign/queue where case originated', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cases', to='campaigns.campaign', verbose_name='Source Channel')),
                ('status', models.ForeignKey(limit_choices_to={'category': 'case_status'}, on_delete=django.db.models.deletion.PROTECT, related_name='cases_by_status', to='core.referencedata', verbose_name='Status')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('activity_type', models.CharField(choices=[('created', 'Case Created'), ('updated', 'Case Updated'), ('assigned', 'Case Assigned'), ('escalated', 'Case Escalated'), ('status_changed', 'Status Changed'), ('priority_changed', 'Priority Changed'), ('note_added', 'Note Added'), ('contact_added', 'Contact Added'), ('contact_removed', 'Contact Removed'), ('category_added', 'Category Added'), ('category_removed', 'Category Removed'), ('service_added', 'Service Added'), ('referral_added', 'Referral Added'), ('call_logged', 'Call Logged'), ('document_uploaded', 'Document Uploaded'), ('closed', 'Case Closed'), ('reopened', 'Case Reopened'), ('ai_analysis', 'AI Analysis Completed'), ('other', 'Other')], db_index=True, max_length=30, verbose_name='Activity Type')),
                ('title', models.CharField(blank=True, help_text='Brief title of the activity', max_length=255, verbose_name='Title')),
                ('description', models.TextField(help_text='Detailed description of what happened', verbose_name='Description')),
                ('data', models.JSONField(blank=True, default=dict, help_text='Structured data related to this activity', verbose_name='Activity Data')),
                ('field_changes', models.JSONField(blank=True, default=dict, help_text='Details of what fields changed (before/after values)', verbose_name='Field Changes')),
                ('is_important', models.BooleanField(default=False, help_text='Mark this activity as important', verbose_name='Is Important')),
                ('is_internal', models.BooleanField(default=False, help_text='Whether this activity is internal only (not visible to clients)', verbose_name='Is Internal')),
                ('source_reference', models.CharField(blank=True, help_text='Reference to source (call ID, email, etc.)', max_length=255, verbose_name='Source Reference')),
                ('legacy_activity_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Legacy Activity ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='cases.case', verbose_name='Case')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed this activity', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_activities', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Case Activity',
                'verbose_name_plural': 'Case Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('attachment_type', models.CharField(choices=[('document', 'Document'), ('image', 'Image'), ('audio', 'Audio Recording'), ('video', 'Video'), ('medical_report', 'Medical Report'), ('police_report', 'Police Report'), ('statement', 'Statement'), ('evidence', 'Evidence'), ('other', 'Other')], default='document', max_length=20, verbose_name='Attachment Type')),
                ('file_name', models.CharField(max_length=255, verbose_name='File Name')),
                ('file_path', models.CharField(help_text='Path to the actual file', max_length=500, verbose_name='File Path')),
                ('file_size', models.PositiveIntegerField(verbose_name='File Size (bytes)')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='MIME Type')),
                ('title', models.CharField(blank=True, help_text='Descriptive title for the attachment', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_confidential', models.BooleanField(default=False, help_text='Whether this attachment contains sensitive information', verbose_name='Is Confidential')),
                ('access_level', models.CharField(choices=[('public', 'Public'), ('staff_only', 'Staff Only'), ('supervisor_only', 'Supervisor Only'), ('confidential', 'Confidential')], default='staff_only', max_length=20, verbose_name='Access Level')),
                ('checksum', models.CharField(blank=True, help_text='SHA256 checksum for file integrity', max_length=64, verbose_name='Checksum')),
                ('legacy_attachment_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Legacy Attachment ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='cases.case', verbose_name='Case')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Case Attachment',
                'verbose_name_plural': 'Case Attachments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the main category for the case', verbose_name='Is Primary Category')),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence in this categorization (0.0 to 1.0)', null=True, verbose_name='Confidence Score')),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Added By')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='cases.case', verbose_name='Case')),
                ('category', models.ForeignKey(limit_choices_to={'category': 'case_category'}, on_delete=django.db.models.deletion.CASCADE, to='core.referencedata', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Case Category',
                'verbose_name_plural': 'Case Categories',
            },
        ),
        migrations.CreateModel(
            name='CaseNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('note_type', models.CharField(choices=[('general', 'General Note'), ('update', 'Case Update'), ('follow_up', 'Follow-up'), ('supervisor', 'Supervisor Note'), ('client_contact', 'Client Contact'), ('internal', 'Internal Note'), ('resolution', 'Resolution Note')], default='general', max_length=20, verbose_name='Note Type')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('is_private', models.BooleanField(default=False, help_text='Whether this note is private to staff only', verbose_name='Is Private')),
                ('is_important', models.BooleanField(default=False, verbose_name='Is Important')),
                ('visible_to_client', models.BooleanField(default=False, help_text='Whether client can see this note', verbose_name='Visible to Client')),
                ('attachments', models.JSONField(blank=True, default=list, verbose_name='Attachments')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='cases.case', verbose_name='Case')),
            ],
            options={
                'verbose_name': 'Case Note',
                'verbose_name_plural': 'Case Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('organization', models.CharField(help_text='Organization or service provider being referred to', max_length=255, verbose_name='Organization')),
                ('contact_person', models.CharField(blank=True, max_length=255, verbose_name='Contact Person')),
                ('contact_phone', models.CharField(blank=True, max_length=50, verbose_name='Contact Phone')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email')),
                ('reason', models.TextField(help_text='Why this referral is being made', verbose_name='Reason for Referral')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('acknowledged', 'Acknowledged'), ('completed', 'Completed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('referral_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Referral Date')),
                ('follow_up_date', models.DateTimeField(blank=True, null=True, verbose_name='Follow-up Date')),
                ('outcome', models.TextField(blank=True, help_text='Result of the referral', verbose_name='Outcome')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('attachments', models.JSONField(blank=True, default=list, help_text='List of attached documents/files', verbose_name='Attachments')),
                ('legacy_referral_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Legacy Referral ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to='cases.case', verbose_name='Case')),
                ('referral_type', models.ForeignKey(limit_choices_to={'category': 'referral_type'}, on_delete=django.db.models.deletion.CASCADE, related_name='referrals_by_type', to='core.referencedata', verbose_name='Referral Type')),
                ('referred_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Referred By')),
                ('urgency', models.ForeignKey(blank=True, limit_choices_to={'category': 'urgency'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referrals_by_urgency', to='core.referencedata', verbose_name='Urgency Level')),
            ],
            options={
                'verbose_name': 'Case Referral',
                'verbose_name_plural': 'Case Referrals',
                'ordering': ['-referral_date'],
            },
        ),
        migrations.CreateModel(
            name='CaseService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('service_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Service Date')),
                ('details', models.TextField(blank=True, help_text='Additional details about the service provided', verbose_name='Service Details')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of the service if applicable', max_digits=10, null=True, verbose_name='Cost')),
                ('is_completed', models.BooleanField(default=True, help_text='Whether the service was successfully completed', verbose_name='Is Completed')),
                ('legacy_service_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Legacy Service ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='cases.case', verbose_name='Case')),
                ('provided_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Provided By')),
                ('service', models.ForeignKey(limit_choices_to={'category': 'service'}, on_delete=django.db.models.deletion.CASCADE, to='core.referencedata', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Case Service',
                'verbose_name_plural': 'Case Services',
                'ordering': ['-service_date'],
            },
        ),
        migrations.CreateModel(
            name='CaseUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('summary', models.CharField(help_text='Brief summary of this update', max_length=255, verbose_name='Update Summary')),
                ('details', models.TextField(help_text='Detailed description of the update', verbose_name='Update Details')),
                ('progress_percentage', models.PositiveSmallIntegerField(blank=True, help_text='Estimated completion percentage (0-100)', null=True, verbose_name='Progress Percentage')),
                ('next_actions', models.TextField(blank=True, help_text='Planned next actions', verbose_name='Next Actions')),
                ('next_update_due', models.DateTimeField(blank=True, null=True, verbose_name='Next Update Due')),
                ('changes_made', models.JSONField(blank=True, default=dict, help_text='Summary of changes made in this update', verbose_name='Changes Made')),
                ('legacy_update_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Legacy Update ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='cases.case', verbose_name='Case')),
                ('priority_at_update', models.ForeignKey(limit_choices_to={'category': 'case_priority'}, on_delete=django.db.models.deletion.PROTECT, related_name='case_updates_at_priority', to='core.referencedata', verbose_name='Priority at Update')),
                ('status_at_update', models.ForeignKey(limit_choices_to={'category': 'case_status'}, on_delete=django.db.models.deletion.PROTECT, related_name='case_updates_at_status', to='core.referencedata', verbose_name='Status at Update')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Case Update',
                'verbose_name_plural': 'Case Updates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_number'], name='cases_case_case_nu_a07304_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['status', '-created_at'], name='cases_case_status__284bbd_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['priority', '-created_at'], name='cases_case_priorit_e8d85d_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['assigned_to', 'status'], name='cases_case_assigne_b0545c_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['reporter', '-created_at'], name='cases_case_reporte_83e7cd_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_type', '-created_at'], name='cases_case_case_ty_c7d140_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['escalated_to', 'escalation_date'], name='cases_case_escalat_4db4c6_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['assigned_to', 'due_date'], name='cases_case_assigne_b32c4d_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['due_date', 'status'], name='cases_case_due_dat_9ce51b_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['incident_date', 'is_gbv_related'], name='cases_case_inciden_ca70ac_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['closed_date', 'status'], name='cases_case_closed__56d42e_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['is_gbv_related', 'status'], name='cases_case_is_gbv__e8f1d6_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['is_gbv_related', '-created_at'], name='cases_case_is_gbv__fb1e8a_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['ai_analysis_completed', '-created_at'], name='cases_case_ai_anal_e80d58_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['ai_risk_score', '-created_at'], name='cases_case_ai_risk_0aba38_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['ai_urgency_score', '-created_at'], name='cases_case_ai_urge_d8fdcc_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['legacy_case_id'], name='cases_case_legacy__442bb2_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['legacy_nsr'], name='cases_case_legacy__065a05_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['is_active', 'status', '-created_at'], name='cases_case_is_acti_495e6a_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['assigned_to', 'is_active', 'status'], name='cases_case_assigne_abf8e3_idx'),
        ),
        migrations.AddConstraint(
            model_name='case',
            constraint=models.CheckConstraint(condition=models.Q(('ai_risk_score__gte', 0.0), ('ai_risk_score__lte', 1.0)), name='valid_ai_risk_score'),
        ),
        migrations.AddConstraint(
            model_name='case',
            constraint=models.CheckConstraint(condition=models.Q(('ai_urgency_score__gte', 0.0), ('ai_urgency_score__lte', 1.0)), name='valid_ai_urgency_score'),
        ),
        migrations.AddConstraint(
            model_name='case',
            constraint=models.CheckConstraint(condition=models.Q(('ai_sentiment_score__gte', -1.0), ('ai_sentiment_score__lte', 1.0)), name='valid_ai_sentiment_score'),
        ),
        migrations.AddIndex(
            model_name='caseactivity',
            index=models.Index(fields=['case', '-created_at'], name='cases_casea_case_id_fed781_idx'),
        ),
        migrations.AddIndex(
            model_name='caseactivity',
            index=models.Index(fields=['user', '-created_at'], name='cases_casea_user_id_bb9b79_idx'),
        ),
        migrations.AddIndex(
            model_name='caseactivity',
            index=models.Index(fields=['activity_type', '-created_at'], name='cases_casea_activit_6a07f3_idx'),
        ),
        migrations.AddIndex(
            model_name='caseactivity',
            index=models.Index(fields=['is_important', '-created_at'], name='cases_casea_is_impo_2adb56_idx'),
        ),
        migrations.AddIndex(
            model_name='caseactivity',
            index=models.Index(fields=['case', 'activity_type'], name='cases_casea_case_id_3aab3b_idx'),
        ),
        migrations.AddIndex(
            model_name='caseactivity',
            index=models.Index(fields=['legacy_activity_id'], name='cases_casea_legacy__9bad5e_idx'),
        ),
        migrations.AddIndex(
            model_name='caseattachment',
            index=models.Index(fields=['case', '-created_at'], name='cases_casea_case_id_24f902_idx'),
        ),
        migrations.AddIndex(
            model_name='caseattachment',
            index=models.Index(fields=['attachment_type', '-created_at'], name='cases_casea_attachm_f75a70_idx'),
        ),
        migrations.AddIndex(
            model_name='caseattachment',
            index=models.Index(fields=['uploaded_by', '-created_at'], name='cases_casea_uploade_c9f73c_idx'),
        ),
        migrations.AddIndex(
            model_name='caseattachment',
            index=models.Index(fields=['is_confidential', 'access_level'], name='cases_casea_is_conf_d8ae51_idx'),
        ),
        migrations.AddIndex(
            model_name='caseattachment',
            index=models.Index(fields=['legacy_attachment_id'], name='cases_casea_legacy__5adb0d_idx'),
        ),
        migrations.AddIndex(
            model_name='casecategory',
            index=models.Index(fields=['case', 'is_primary'], name='cases_casec_case_id_ffb965_idx'),
        ),
        migrations.AddIndex(
            model_name='casecategory',
            index=models.Index(fields=['category', 'is_primary'], name='cases_casec_categor_670338_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='casecategory',
            unique_together={('case', 'category')},
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['case', '-created_at'], name='cases_casen_case_id_261a04_idx'),
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['author', '-created_at'], name='cases_casen_author__cae79f_idx'),
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['note_type', '-created_at'], name='cases_casen_note_ty_5706de_idx'),
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['is_important', '-created_at'], name='cases_casen_is_impo_e0faa4_idx'),
        ),
        migrations.AddIndex(
            model_name='casenote',
            index=models.Index(fields=['case', 'note_type'], name='cases_casen_case_id_217153_idx'),
        ),
        migrations.AddIndex(
            model_name='casereferral',
            index=models.Index(fields=['case', '-referral_date'], name='cases_caser_case_id_30069b_idx'),
        ),
        migrations.AddIndex(
            model_name='casereferral',
            index=models.Index(fields=['status', '-referral_date'], name='cases_caser_status_00f0a7_idx'),
        ),
        migrations.AddIndex(
            model_name='casereferral',
            index=models.Index(fields=['referred_by', '-referral_date'], name='cases_caser_referre_addd53_idx'),
        ),
        migrations.AddIndex(
            model_name='casereferral',
            index=models.Index(fields=['follow_up_date', 'status'], name='cases_caser_follow__4682f1_idx'),
        ),
        migrations.AddIndex(
            model_name='casereferral',
            index=models.Index(fields=['legacy_referral_id'], name='cases_caser_legacy__4510eb_idx'),
        ),
        migrations.AddIndex(
            model_name='caseservice',
            index=models.Index(fields=['case', '-service_date'], name='cases_cases_case_id_4d5849_idx'),
        ),
        migrations.AddIndex(
            model_name='caseservice',
            index=models.Index(fields=['service', '-service_date'], name='cases_cases_service_ca2582_idx'),
        ),
        migrations.AddIndex(
            model_name='caseservice',
            index=models.Index(fields=['provided_by', '-service_date'], name='cases_cases_provide_a1d21f_idx'),
        ),
        migrations.AddIndex(
            model_name='caseservice',
            index=models.Index(fields=['legacy_service_id'], name='cases_cases_legacy__638608_idx'),
        ),
        migrations.AddIndex(
            model_name='caseupdate',
            index=models.Index(fields=['case', '-created_at'], name='cases_caseu_case_id_716cd4_idx'),
        ),
        migrations.AddIndex(
            model_name='caseupdate',
            index=models.Index(fields=['updated_by', '-created_at'], name='cases_caseu_updated_8865e4_idx'),
        ),
        migrations.AddIndex(
            model_name='caseupdate',
            index=models.Index(fields=['next_update_due', 'case'], name='cases_caseu_next_up_4b6438_idx'),
        ),
        migrations.AddIndex(
            model_name='caseupdate',
            index=models.Index(fields=['legacy_update_id'], name='cases_caseu_legacy__797e93_idx'),
        ),
        migrations.AddConstraint(
            model_name='caseupdate',
            constraint=models.CheckConstraint(condition=models.Q(('progress_percentage__gte', 0), ('progress_percentage__lte', 100)), name='valid_progress_percentage'),
        ),
    ]
