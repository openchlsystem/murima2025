# Generated by Django 5.2.1 on 2025-06-05 13:47

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contacts', '0001_initial'),
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('name', models.CharField(db_index=True, help_text='Unique name for the campaign', max_length=255, verbose_name='Campaign Name')),
                ('description', models.TextField(blank=True, help_text='Campaign description and objectives', verbose_name='Description')),
                ('campaign_type', models.CharField(choices=[('outbound', 'Outbound Campaign'), ('inbound', 'Inbound Queue'), ('blended', 'Blended Campaign'), ('preview', 'Preview Dialing'), ('predictive', 'Predictive Dialing'), ('progressive', 'Progressive Dialing')], default='inbound', max_length=20, verbose_name='Campaign Type')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], db_index=True, default='draft', max_length=20, verbose_name='Status')),
                ('queue_name', models.CharField(help_text='Asterisk queue name (must be unique)', max_length=100, unique=True, verbose_name='Queue Name')),
                ('caller_id', models.CharField(help_text='Caller ID to display for outbound calls', max_length=50, verbose_name='Caller ID')),
                ('ring_strategy', models.CharField(choices=[('rrmemory', 'Round Robin with Memory'), ('roundrobin', 'Round Robin'), ('leastrecent', 'Least Recent'), ('fewestcalls', 'Fewest Calls'), ('random', 'Random'), ('linear', 'Linear')], default='rrmemory', help_text='How to distribute calls to agents', max_length=20, verbose_name='Ring Strategy')),
                ('max_agents', models.PositiveIntegerField(default=10, help_text='Maximum number of agents in this campaign', verbose_name='Maximum Agents')),
                ('ring_timeout', models.PositiveIntegerField(default=30, help_text='How long to ring each agent', verbose_name='Ring Timeout (seconds)')),
                ('wrapup_time', models.PositiveIntegerField(default=60, help_text='Time for agent to complete call tasks', verbose_name='Wrapup Time (seconds)')),
                ('start_date', models.DateTimeField(help_text='When the campaign should start', verbose_name='Start Date')),
                ('end_date', models.DateTimeField(help_text='When the campaign should end', verbose_name='End Date')),
                ('working_hours', models.JSONField(blank=True, default=dict, help_text='Schedule configuration for the campaign', verbose_name='Working Hours')),
                ('target_contacts', models.PositiveIntegerField(default=0, help_text='Number of contacts to reach in this campaign', verbose_name='Target Contacts')),
                ('contacts_attempted', models.PositiveIntegerField(default=0, help_text='Number of contacts attempted so far', verbose_name='Contacts Attempted')),
                ('contacts_reached', models.PositiveIntegerField(default=0, help_text='Number of contacts successfully reached', verbose_name='Contacts Reached')),
                ('sla_target_answer', models.PositiveIntegerField(blank=True, help_text='Target time to answer calls', null=True, verbose_name='SLA Answer Target (seconds)')),
                ('sla_target_abandon', models.PositiveIntegerField(blank=True, help_text='Target time before call abandonment', null=True, verbose_name='SLA Abandon Target (seconds)')),
                ('retry_attempts', models.PositiveIntegerField(default=3, help_text='Maximum retry attempts for outbound calls', verbose_name='Retry Attempts')),
                ('retry_interval', models.PositiveIntegerField(default=3600, help_text='Time between retry attempts', verbose_name='Retry Interval (seconds)')),
                ('total_calls', models.PositiveIntegerField(default=0, help_text='Total number of calls in this campaign', verbose_name='Total Calls')),
                ('answered_calls', models.PositiveIntegerField(default=0, verbose_name='Answered Calls')),
                ('abandoned_calls', models.PositiveIntegerField(default=0, verbose_name='Abandoned Calls')),
                ('avg_talk_time', models.DurationField(blank=True, null=True, verbose_name='Average Talk Time')),
                ('avg_wait_time', models.DurationField(blank=True, null=True, verbose_name='Average Wait Time')),
                ('avg_hold_time', models.DurationField(blank=True, null=True, verbose_name='Average Hold Time')),
                ('sla_compliance_rate', models.FloatField(blank=True, help_text='Percentage of calls meeting SLA targets', null=True, verbose_name='SLA Compliance Rate')),
                ('legacy_campaign_id', models.IntegerField(blank=True, db_index=True, help_text='Original campaign table ID', null=True, verbose_name='Legacy Campaign ID')),
                ('legacy_data', models.JSONField(blank=True, default=dict, help_text='Original campaign data for migration tracking', verbose_name='Legacy Data')),
                ('category', models.ForeignKey(blank=True, limit_choices_to={'category': 'campaign_category'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns_by_category', to='core.referencedata', verbose_name='Campaign Category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('voice_prompt', models.ForeignKey(blank=True, help_text='IVR voice prompt for this campaign', limit_choices_to={'category': 'voice_prompt'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns_using_prompt', to='core.referencedata', verbose_name='Voice Prompt')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CampaignContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('attempted', 'Attempted'), ('contacted', 'Contacted'), ('completed', 'Completed'), ('do_not_call', 'Do Not Call'), ('invalid', 'Invalid')], db_index=True, default='pending', max_length=20, verbose_name='Status')),
                ('priority', models.PositiveSmallIntegerField(default=1, help_text='Priority level (1=highest, 5=lowest)', verbose_name='Priority')),
                ('attempts_made', models.PositiveIntegerField(default=0, verbose_name='Attempts Made')),
                ('max_attempts', models.PositiveIntegerField(default=3, verbose_name='Maximum Attempts')),
                ('last_attempt', models.DateTimeField(blank=True, null=True, verbose_name='Last Attempt')),
                ('next_attempt', models.DateTimeField(blank=True, help_text='Scheduled time for next attempt', null=True, verbose_name='Next Attempt')),
                ('notes', models.TextField(blank=True, help_text='Notes about this contact in this campaign', verbose_name='Notes')),
                ('assigned_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Assigned Agent')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_contacts', to='campaigns.campaign', verbose_name='Campaign')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_assignments', to='contacts.contact', verbose_name='Contact')),
                ('result', models.ForeignKey(blank=True, limit_choices_to={'category': 'call_result'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.referencedata', verbose_name='Call Result')),
            ],
            options={
                'verbose_name': 'Campaign Contact',
                'verbose_name_plural': 'Campaign Contacts',
                'ordering': ['priority', 'next_attempt'],
            },
        ),
        migrations.CreateModel(
            name='CampaignMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('role', models.CharField(choices=[('agent', 'Agent'), ('supervisor', 'Supervisor'), ('team_lead', 'Team Lead'), ('quality_analyst', 'Quality Analyst')], default='agent', max_length=20, verbose_name='Role')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this agent is currently active in the campaign', verbose_name='Is Active')),
                ('assigned_date', models.DateTimeField(auto_now_add=True, verbose_name='Assigned Date')),
                ('unassigned_date', models.DateTimeField(blank=True, null=True, verbose_name='Unassigned Date')),
                ('calls_handled', models.PositiveIntegerField(default=0, help_text='Number of calls handled by this agent in this campaign', verbose_name='Calls Handled')),
                ('calls_answered', models.PositiveIntegerField(default=0, verbose_name='Calls Answered')),
                ('calls_successful', models.PositiveIntegerField(default=0, help_text='Calls that resulted in successful outcomes', verbose_name='Successful Calls')),
                ('total_talk_time', models.DurationField(blank=True, null=True, verbose_name='Total Talk Time')),
                ('avg_talk_time', models.DurationField(blank=True, null=True, verbose_name='Average Talk Time')),
                ('quality_score', models.FloatField(blank=True, help_text='Average quality score for this agent in this campaign', null=True, verbose_name='Quality Score')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_memberships', to=settings.AUTH_USER_MODEL, verbose_name='Agent')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='campaigns.campaign', verbose_name='Campaign')),
            ],
            options={
                'verbose_name': 'Campaign Member',
                'verbose_name_plural': 'Campaign Members',
                'ordering': ['-assigned_date'],
            },
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['name'], name='campaigns_c_name_602631_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['queue_name'], name='campaigns_c_queue_n_ef7615_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['status', 'campaign_type'], name='campaigns_c_status_f8002b_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['start_date', 'end_date'], name='campaigns_c_start_d_996cc8_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['legacy_campaign_id'], name='campaigns_c_legacy__a37735_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['is_active', 'status'], name='campaigns_c_is_acti_679d4e_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigncontact',
            index=models.Index(fields=['campaign', 'status'], name='campaigns_c_campaig_77ea88_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigncontact',
            index=models.Index(fields=['status', 'next_attempt'], name='campaigns_c_status_6373e6_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigncontact',
            index=models.Index(fields=['assigned_agent', 'status'], name='campaigns_c_assigne_fb9e42_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigncontact',
            index=models.Index(fields=['priority', 'next_attempt'], name='campaigns_c_priorit_b9e236_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='campaigncontact',
            unique_together={('campaign', 'contact')},
        ),
        migrations.AddIndex(
            model_name='campaignmember',
            index=models.Index(fields=['campaign', 'is_active'], name='campaigns_c_campaig_f64d37_idx'),
        ),
        migrations.AddIndex(
            model_name='campaignmember',
            index=models.Index(fields=['agent', 'is_active'], name='campaigns_c_agent_i_1cd016_idx'),
        ),
        migrations.AddIndex(
            model_name='campaignmember',
            index=models.Index(fields=['role', 'is_active'], name='campaigns_c_role_06ef96_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='campaignmember',
            unique_together={('campaign', 'agent')},
        ),
    ]
