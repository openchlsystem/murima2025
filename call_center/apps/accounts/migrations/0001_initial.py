# Generated by Django 5.2.1 on 2025-06-04 22:03

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('username', models.CharField(help_text='Required. 100 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.', regex='^[\\w.@+-]+$')], verbose_name='Username')),
                ('email', models.EmailField(help_text='Required. Valid email address.', max_length=255, unique=True, verbose_name='Email')),
                ('employee_id', models.CharField(blank=True, help_text='Unique employee identifier', max_length=50, null=True, unique=True, verbose_name='Employee ID')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Last name')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone number')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('agent', 'Agent'), ('supervisor', 'Supervisor'), ('manager', 'Manager'), ('qa', 'Quality Assurance'), ('reporting', 'Reporting Analyst'), ('it_support', 'IT Support')], default='agent', help_text="User's primary role in the system", max_length=20, verbose_name='Role')),
                ('department', models.CharField(blank=True, help_text='Department or team the user belongs to', max_length=100, verbose_name='Department')),
                ('extension', models.CharField(blank=True, help_text='Phone extension number', max_length=20, null=True, verbose_name='Extension')),
                ('agent_number', models.CharField(blank=True, help_text='Unique agent identifier for call routing', max_length=20, null=True, verbose_name='Agent number')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='active', max_length=20, verbose_name='Status')),
                ('agent_status', models.CharField(choices=[('available', 'Available'), ('busy', 'Busy'), ('on_call', 'On Call'), ('on_break', 'On Break'), ('in_meeting', 'In Meeting'), ('offline', 'Offline'), ('away', 'Away')], default='offline', help_text='Current availability status', max_length=20, verbose_name='Agent status')),
                ('is_online', models.BooleanField(default=False, help_text='Whether the user is currently logged in', verbose_name='Is online')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Last login IP')),
                ('last_activity', models.DateTimeField(blank=True, help_text='Last time user performed any action', null=True, verbose_name='Last activity')),
                ('last_break_type', models.CharField(blank=True, help_text='Type of last break taken', max_length=32, null=True, verbose_name='Last break type')),
                ('last_break_time', models.DateTimeField(blank=True, help_text='When the last break was taken', null=True, verbose_name='Last break time')),
                ('break_start_time', models.DateTimeField(blank=True, help_text='When current break started', null=True, verbose_name='Break start time')),
                ('shift_start_time', models.DateTimeField(blank=True, help_text='When current shift started', null=True, verbose_name='Shift start time')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.', verbose_name='Is active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into admin site.', verbose_name='Is staff')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Timezone')),
                ('language', models.CharField(default='en', max_length=10, verbose_name='Language')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date joined')),
                ('date_terminated', models.DateTimeField(blank=True, null=True, verbose_name='Date terminated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('manager', models.ForeignKey(blank=True, help_text='Direct manager/supervisor', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='AgentShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')], verbose_name='Day of week')),
                ('start_time', models.TimeField(verbose_name='Start time')),
                ('end_time', models.TimeField(verbose_name='End time')),
                ('break_duration_minutes', models.IntegerField(default=60, verbose_name='Break duration (minutes)')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Timezone')),
                ('effective_from', models.DateField(default=django.utils.timezone.now, verbose_name='Effective from')),
                ('effective_to', models.DateField(blank=True, null=True, verbose_name='Effective to')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shifts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Agent Shift',
                'verbose_name_plural': 'Agent Shifts',
                'ordering': ['user', 'day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m/', verbose_name='Avatar')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, verbose_name='Emergency contact name')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Emergency contact phone')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email notifications')),
                ('browser_notifications', models.BooleanField(default=True, verbose_name='Browser notifications')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='SMS notifications')),
                ('skills', models.JSONField(blank=True, default=list, help_text='List of skills and competencies', verbose_name='Skills')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='Professional certifications', verbose_name='Certifications')),
                ('languages_spoken', models.JSONField(blank=True, default=list, help_text='Languages the user can communicate in', verbose_name='Languages spoken')),
                ('call_queue_limit', models.IntegerField(default=5, help_text='Maximum number of calls in queue for this agent', verbose_name='Call queue limit')),
                ('auto_answer_calls', models.BooleanField(default=False, verbose_name='Auto answer calls')),
                ('wrap_up_time_seconds', models.IntegerField(default=30, help_text='Time required after each call for notes', verbose_name='Wrap-up time (seconds)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Session key')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP address')),
                ('user_agent', models.TextField(verbose_name='User agent')),
                ('login_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Login time')),
                ('logout_time', models.DateTimeField(blank=True, null=True, verbose_name='Logout time')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'ordering': ['-login_time'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='accounts_us_usernam_c0ea66_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='accounts_us_email_74c8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'is_active'], name='accounts_us_role_2b136f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['agent_status'], name='accounts_us_agent_s_284a54_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['department', 'is_active'], name='accounts_us_departm_6c9fe1_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['manager'], name='accounts_us_manager_bb7da4_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['employee_id'], name='accounts_us_employe_0cbd94_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('employee_id__isnull', False)), fields=('employee_id',), name='unique_employee_id'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('agent_number__isnull', False)), fields=('agent_number',), name='unique_agent_number'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('extension__isnull', False)), fields=('extension',), name='unique_extension'),
        ),
        migrations.AddIndex(
            model_name='agentshift',
            index=models.Index(fields=['user', 'day_of_week', 'is_active'], name='accounts_ag_user_id_a17d1f_idx'),
        ),
        migrations.AddIndex(
            model_name='agentshift',
            index=models.Index(fields=['effective_from', 'effective_to'], name='accounts_ag_effecti_4e47db_idx'),
        ),
        migrations.AddConstraint(
            model_name='agentshift',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('user', 'day_of_week', 'start_time'), name='unique_active_user_shift'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', '-login_time'], name='accounts_us_user_id_1d8a65_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_key'], name='accounts_us_session_511f42_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_active'], name='accounts_us_is_acti_58b48a_idx'),
        ),
    ]
